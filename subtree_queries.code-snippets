{
	"CSES problem subtree_queries": {
		"prefix": "Subtree_queries",
		"body": [
		  " ",
		  "struct segment_tree{",
		  "    ll size;",
		  "    vector<ll>tree;",
		  "    //INITIALIZATION",
		  "    void init(ll n){",
		  "        size=1;",
		  "        while(size<n) size*=2;",
		  "        tree.assign(2*size,0LL);",
		  "    }",
		  "    ll merge(ll a,ll b){",
		  "        return a+b;",
		  "    }",
		  " ",
		  "    void build(vector<ll> &a,ll x,ll lx,ll rx){",
		  "        //linear time",
		  "        if(rx-lx==1){",
		  "            if(lx<a.size()){",
		  "                tree[x]=a[lx];",
		  "            }",
		  "            return;",
		  "        }",
		  "        ll m=(lx+rx)/2;",
		  "        build(a,2*x+1,lx,m);",
		  "        build(a,2*x+2,m,rx);",
		  "        tree[x]=merge(tree[2*x+1],tree[2*x+2]);",
		  "    }",
		  "    void build(vector<ll> &a){",
		  "        //linear time",
		  "        build(a,0,0,size);",
		  "    }",
		  "    //SET AND GET",
		  "    void set(ll i,ll val,ll x,ll lx,ll rx){",
		  "        if(rx-lx==1){",
		  "            //leaf",
		  "            tree[x]=val;",
		  "            return;",
		  "        }",
		  "        ll m=(lx+rx)/2;",
		  "        if(i<m){",
		  "            set(i,val,2*x+1,lx,m);",
		  "        }",
		  "        else{",
		  "            set(i,val,2*x+2,m,rx);",
		  "        }",
		  "        tree[x]=merge(tree[2*x+1],tree[2*x+2]);",
		  "    }",
		  "    void set(ll i,ll val){",
		  "        // assigns val at index i",
		  "        set(i,val,0,0,size);",
		  "    }",
		  " ",
		  "    ///RANGE SUM",
		  "    ll sum(ll l,ll r,ll x,ll lx,ll rx){",
		  "        if(lx>=r || l>=rx){",
		  "            return 0;",
		  "        }",
		  "        if(lx>=l && rx<=r){",
		  "            return tree[x];",
		  "        }",
		  "        ll m=(lx+rx)/2;",
		  "        ll s1=sum(l,r,2*x+1,lx,m);",
		  "        ll s2=sum(l,r,2*x+2,m,rx);",
		  "        return merge(s1,s2);",
		  "    }",
		  "    ll sum(ll l,ll r){",
		  "        //returns sum from l to r-1",
		  "        return sum(l,r,0,0,size);",
		  "    }",
		  " ",
		  "};",
		  " ",
		  " ",
		  "vector<ll>g[N];",
		  "vector<ll>in(N),out(N);",
		  "ll timer;",
		  "void euler_tour(ll now,ll prev){",
		  "    in[now]=timer++;",
		  "    for(auto child:g[now]){",
		  "        if(child!=prev) euler_tour(child,now);",
		  "    }",
		  "    out[now]=timer;",
		  "}",
		  " ",
		  "int main()",
		  "{",
		  "    fast;",
		  "    ll t;",
		  "    // setIO();",
		  "    // ll tno=1;;",
		  "    t = 1;",
		  "    ll n,q;",
		  "    cin>>n>>q;",
		  "    vector<ll>val(n);",
		  "    cin>>val;",
		  " ",
		  "    for(ll i=0;i<n-1;i++){",
		  "        ll x,y;",
		  "        cin>>x>>y;",
		  "        g[x].push_back(y);",
		  "        g[y].push_back(x);",
		  " ",
		  "    }",
		  "    euler_tour(1,-1);",
		  "    // deb2(in,out);",
		  "    segment_tree sg;",
		  "    sg.init(n);",
		  "    for(ll i=1;i<=n;i++) sg.set(in[i],val[i-1]);",
		  "    while(q--){",
		  "        ll op;",
		  "        cin>>op;",
		  "        // deb(op);",
		  "        if(op==1){",
		  "            ll y,v;",
		  "            cin>>y>>v;",
		  "            sg.set(in[y],v);",
		  "        }",
		  "        else{",
		  "            ll pos;",
		  "            cin>>pos;",
		  "            ll ans=sg.sum(in[pos],out[pos]);",
		  "            cout<<ans<<nn;",
		  "        }",
		  "    }",
		  " ",
		  "    return 0;",
		  "}"
		],
		"description": "CSES problem subtree_queries"
	  }
}