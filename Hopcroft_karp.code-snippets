{
	"Hopcroft_Karp Flow": {
		"prefix": "Hopcroft_Karp Flow maximum bipartite matching",
		"body": [
		  "struct Hopcroft_Karp {",
		  "    static const int inf = 1e9;",
		  "    vector <vector<int>> adj;",
		  "    int n, m;",
		  "    vector <int> lef, rig, dis;",
		  "    queue <int> q;",
		  " ",
		  "    Hopcroft_Karp(int n, int m) : n(n), m(m) {",
		  "        int p=n+m+1;",
		  "        adj.resize(p);",
		  "        lef.resize(p, 0);",
		  "        rig.resize(p, 0);",
		  "        dis.resize(p, 0);",
		  "    }",
		  " ",
		  "    void add_edge(int u, int v) {",
		  "        adj[u].pb(v+n);",
		  "    }",
		  " ",
		  "    bool bfs() {",
		  "        for(int i=1; i<=n; i++){",
		  "            if(!lef[i]){",
		  "                dis[i]=0;",
		  "                q.push(i);",
		  "            }",
		  "            else dis[i]=inf;",
		  "        }",
		  " ",
		  "        dis[0]=inf;",
		  "        while (!q.empty()) {",
		  "            int u=q.front();",
		  "            q.pop();",
		  "            for(int i=0; i<adj[u].size(); i++){",
		  "                int v=adj[u][i];",
		  "                if(dis[rig[v]]==inf){",
		  "                    dis[rig[v]]=dis[u]+1;",
		  "                    q.push(rig[v]);",
		  "                }",
		  "            }",
		  "        }",
		  " ",
		  "        return dis[0]!=inf;",
		  "    }",
		  " ",
		  "    bool dfs(int u){",
		  "        if(!u) return true;",
		  "        for(int i=0; i<adj[u].size(); i++){",
		  "            int v=adj[u][i];",
		  "            if(dis[rig[v]]==dis[u]+1 && dfs(rig[v])){",
		  "                lef[u]=v;",
		  "                rig[v]=u;",
		  "                return true;",
		  "            }",
		  "        }",
		  "        dis[u]=inf;",
		  "        return false;",
		  "    }",
		  " ",
		  "    ll matching(){",
		  "        ll max_matching=0;",
		  "        while(bfs()){",
		  "            for(int i=1; i<=n; i++){",
		  "                if(!lef[i] && dfs(i)) max_matching++; ",
		  "            }",
		  "        }",
		  "        return max_matching;",
		  "    }",
		  "};"
		],
		"description": "Hopcroft_Karp Flow"
	  }
}