{
  "ancestors of a node in a acyclic directed graph": {
    "prefix": "ancestors of a node in a acyclic directed graph",
    "body": [
      "void findAncestors(int n, vector<vector<int> >& edges)",
      "{",
      "    vector<vector<int> > adj(n); // adjacency list of graph",
      "    vector<vector<int> > ancestors(",
      "        n); // list of ancestors for each node",
      "    vector<int> inDegree(n, 0); // in-degree of each node",
      "    queue<int> q; // queue for topological sorting",
      "",
      "    // Construct the adjacency list and in-degree array",
      "    for (auto& edge : edges) {",
      "        adj[edge[0]].push_back(edge[1]);",
      "        inDegree[edge[1]]++;",
      "    }",
      "",
      "    // Enqueue nodes with zero in-degree (no dependencies)",
      "    for (int i = 0; i < n; i++) {",
      "        if (inDegree[i] == 0) {",
      "            q.push(i);",
      "        }",
      "    }",
      "",
      "    // Process the graph in topological order",
      "    while (!q.empty()) {",
      "        int current = q.front();",
      "        q.pop();",
      "",
      "        // For each descendant, reduce its in-degree and",
      "        // update its ancestors",
      "        for (int descendant : adj[current]) {",
      "            // Add all ancestors of current to its",
      "            // descendant",
      "            for (int ancestor : ancestors[current]) {",
      "                if (find(ancestors[descendant].begin(),",
      "                         ancestors[descendant].end(),",
      "                         ancestor)",
      "                    == ancestors[descendant].end()) {",
      "                    ancestors[descendant].push_back(",
      "                        ancestor);",
      "                }",
      "            }",
      "            // Add current as an ancestor to its descendant",
      "            if (find(ancestors[descendant].begin(),",
      "                     ancestors[descendant].end(), current)",
      "                == ancestors[descendant].end()) {",
      "                ancestors[descendant].push_back(current);",
      "            }",
      "",
      "            // Decrease in-degree and enqueue if it's ready",
      "            if (--inDegree[descendant] == 0) {",
      "                q.push(descendant);",
      "            }",
      "        }",
      "    }",
      "",
      "    // Print results",
      "    for (int i = 0; i < n; i++) {",
      "        sort(ancestors[i].begin(),",
      "             ancestors[i].end()); // Sort for ordered output",
      "        cout << i << \" -> \";",
      "        for (int ancestor : ancestors[i]) {",
      "            cout << ancestor << \" \";",
      "        }",
      "        cout << endl;",
      "    }",
      "}",
      ""
    ],
    "description": "ancestors of a node in a acyclic directed graph"
  }
}