{
	"Given two polygons check if they intersect": {
		"prefix": "Polygon intersection",
		"body": [
			"struct pt {",
			"    long long x, y;",
			"    pt operator + (const pt & p) const {",
			"        return pt{x + p.x, y + p.y};",
			"    }",
			"    pt operator - (const pt & p) const {",
			"        return pt{x - p.x, y - p.y};",
			"    }",
			"    long long cross(const pt & p) const {",
			"        return x * p.y - y * p.x;",
			"    }",
			"};",
			"",
			"// Helper function to reorder the polygon with the lowest point as the start",
			"void reorder_polygon(vector<pt> & P) {",
			"    size_t pos = 0;",
			"    for(size_t i = 1; i < P.size(); i++) {",
			"        if(P[i].y < P[pos].y || (P[i].y == P[pos].y && P[i].x < P[pos].x))",
			"            pos = i;",
			"    }",
			"    rotate(P.begin(), P.begin() + pos, P.end());",
			"}",
			"",
			"// Computes the Minkowski sum of two polygons P and Q",
			"vector<pt> minkowski(vector<pt> P, vector<pt> Q) {",
			"    reorder_polygon(P);",
			"    reorder_polygon(Q);",
			"    ",
			"    P.push_back(P[0]);",
			"    P.push_back(P[1]);",
			"    Q.push_back(Q[0]);",
			"    Q.push_back(Q[1]);",
			"",
			"    vector<pt> result;",
			"    size_t i = 0, j = 0;",
			"    while(i < P.size() - 2 || j < Q.size() - 2) {",
			"        result.push_back(P[i] + Q[j]);",
			"        auto cross = (P[i + 1] - P[i]).cross(Q[j + 1] - Q[j]);",
			"        if(cross >= 0 && i < P.size() - 2)",
			"            ++i;",
			"        if(cross <= 0 && j < Q.size() - 2)",
			"            ++j;",
			"    }",
			"    return result;",
			"}",
			"",
			"// Checks if a point is inside a polygon using the winding number approach",
			"bool point_in_polygon(const pt &origin, const vector<pt> &polygon) {",
			"    int winding_number = 0;",
			"    for (size_t i = 0; i < polygon.size(); i++) {",
			"        pt a = polygon[i];",
			"        pt b = polygon[(i + 1) % polygon.size()];",
			"        if (a.y <= origin.y) {",
			"            if (b.y > origin.y && (b - a).cross(origin - a) > 0)",
			"                ++winding_number;",
			"        } else {",
			"            if (b.y <= origin.y && (b - a).cross(origin - a) < 0)",
			"                --winding_number;",
			"        }",
			"    }",
			"    return winding_number != 0;",
			"}",
			"",
			"// Main function to check if two polygons intersect",
			"bool polygons_intersect(const vector<pt>& P, const vector<pt>& Q) {",
			"    vector<pt> minkowski_sum = minkowski(P, Q);",
			"    return point_in_polygon(pt{0, 0}, minkowski_sum);",
			"}",
			""
		],
		"description": "Given two polygons check if they intersect"
	}
}