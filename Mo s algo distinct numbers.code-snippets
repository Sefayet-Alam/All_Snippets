{
	"Mo's ALgo divides in bucket and sorts the queries to offline": {
  "prefix": "Mo s Algo to get distinct numbers",
  "body": [
    "",
    "const ll B = 440;",
    "",
    "struct query",
    "{",
    "    int l, r, id;",
    "    bool operator<(const query &x) const",
    "    {",
    "        if (l / B == x.l / B)",
    "            return ((l / B) & 1) ? r > x.r : r < x.r;",
    "        return l / B < x.l / B;",
    "    }",
    "} Q[N];",
    "ll cnt[N], a[N];",
    "long long sum;",
    "inline void add_left(int i)",
    "{",
    "    ll x = a[i];",
    "    if (cnt[x] == 0)",
    "        sum++;",
    "    ++cnt[x];",
    "}",
    "inline void add_right(int i)",
    "{",
    "    int x = a[i];",
    "    if (cnt[x] == 0)",
    "        sum++;",
    "    ++cnt[x];",
    "}",
    "inline void rem_left(int i)",
    "{",
    "    int x = a[i];",
    "    if (cnt[x] == 1)",
    "        sum--;",
    "    --cnt[x];",
    "}",
    "inline void rem_right(int i)",
    "{",
    "    int x = a[i];",
    "    if (cnt[x] == 1)",
    "        sum--;",
    "    --cnt[x];",
    "}",
    "long long ans[N];"
  ],
  "description": "Mo's ALgo divides in bucket and sorts the queries to offline"
}
}